name: "> Build"

concurrency: no-concurrency # no concurrency

env:
  TF_VERSION: "1.3.7"
  PLAN_CACHE: "plan.cache"
  PLAN_FILE: "plan.json"
  GAR_LOCATION: us-central1
  PROJECT_ID: newops14
  REPOSITORY: myrepo
  IMAGE: sample

on:
  push:
    # Sequence of patterns matched against refs/heads
    branches:
      - master
    paths:
      - "source/*/*.js"

  # triggered directly from github
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Authenticate to Google Cloud
        id: gcloud-auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.SAC_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v1.1.0

      - name: Docker configuration
        run: gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

      # Build the Docker image
      - name: Build
        run: |-
          cd source
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .
      # Push the Docker image to Google Artifact Registry
      - name: Publish
        run: |-
          cd source
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

      # - name: Clone repo
      #   uses: actions/checkout@main
      #   with:
      #     repository: cloud-native-engineering/new-cloud-provisioning
      #     ref: main

      # - name: Install Terraform
      #   uses: hashicorp/setup-terraform@v2
      #   with:
      #     terraform_version: ${{ env.TF_VERSION }}
      #     terraform_wrapper: false

      # - name: Install Node
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: "16"

      # - name: Generate Terraform Project Code
      #   id: generate_project
      #   uses: ./.github/actions/generate_project
      #   with:
      #     environment: ${{ secrets.ENVIRONMENT }}
      #     project_name: ${{ secrets.PROJECT_NAME }}
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     folder: projects

      # # TODO: not the best approach
      # - name: clean-netrc
      #   run: |
      #     rm -f $HOME/.netrc || true

      # # TODO: not the best approach
      # - name: Git Credentials for Terraform
      #   uses: little-core-labs/netrc-creds@master
      #   with:
      #     machine: git.epo.org
      #     login: oauth2
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Authenticate to Google Cloud
      #   id: gcloud-auth
      #   uses: google-github-actions/auth@v1
      #   with:
      #     credentials_json: ${{ secrets.SAC_KEY }}

      # - name: Setup gcloud
      #   uses: google-github-actions/setup-gcloud@v1.1.0

      # - name: Terraform Plan
      #   env:
      #     VAULT_ROLE_ID: ${{ secrets.VAULT_APPROLE_ID }}
      #     VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}
      #     VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      #   run: |
      #     set -e
      #     set -o pipefail
      #     terraform -chdir="./projects/${{ secrets.ENVIRONMENT }}/${{ secrets.PROJECT_NAME }}/generated" fmt -no-color -check
      #     terraform -chdir="./projects/${{ secrets.ENVIRONMENT }}/${{ secrets.PROJECT_NAME }}/generated" init -no-color -input=false
      #     terraform -chdir="./projects/${{ secrets.ENVIRONMENT }}/${{ secrets.PROJECT_NAME }}/generated" validate -no-color
      #     terraform -chdir="./projects/${{ secrets.ENVIRONMENT }}/${{ secrets.PROJECT_NAME }}/generated" plan -refresh=true -input=false -no-color -out=$GITHUB_WORKSPACE/$PLAN_CACHE
      #     if [ -f "$GITHUB_WORKSPACE/$PLAN_CACHE" ]; then
      #       terraform -chdir="./projects/${{ secrets.ENVIRONMENT }}/${{ secrets.PROJECT_NAME }}/generated" show --json $GITHUB_WORKSPACE/$PLAN_CACHE > $GITHUB_WORKSPACE/$PLAN_FILE
      #     fi

      # - name: Validate Terraform Plan
      #   id: validate_plan
      #   uses: ./.github/actions/validate_tf_plan
      #   with:
      #     file: ${{ github.workspace }}/${{ env.PLAN_FILE }}

      # - name: Terraform Apply
      #   env:
      #     VAULT_ROLE_ID: ${{ secrets.VAULT_APPROLE_ID }}
      #     VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}
      #     VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      #   run: |
      #     set -e
      #     set -o pipefail
      #     if [ -f "$GITHUB_WORKSPACE/$PLAN_CACHE" ]; then
      #       terraform -chdir="./projects/${{ secrets.ENVIRONMENT }}/${{ secrets.PROJECT_NAME }}/generated" apply -auto-approve -no-color $GITHUB_WORKSPACE/$PLAN_CACHE
      #     fi

      # - name: Deploy Services
      #   id: deploy_services
      #   uses: ./.github/actions/deploy_services
      #   with:
      #     file: ./projects/${{ secrets.ENVIRONMENT }}/${{ secrets.PROJECT_NAME }}/generated/crs
      #     projectRegion: ${{ secrets.PROJECT_REGION }}
      #     projectId: ${{ secrets.PROJECT_ID }}
      #     projectName: ${{ secrets.PROJECT_NAME }}
      #     environment: ${{ secrets.ENVIRONMENT }}
      #     dryRun: false
      #     deleted: ${{ steps.validate_plan.outputs.deleted }}
